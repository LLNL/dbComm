{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"dbComm","text":"<p>dbComm is a wrapper for pymongo that simplifies MongoDB database interactions with support for SSH tunneling and LDAP authentication.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install dbComm\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from dbComm import Mongo\n\n# Direct connection\ndb = Mongo(host=\"localhost\", port=27017)\n\n# SSH tunnel connection\ndb = Mongo(\n    host=\"remote.server\",\n    port=27017,\n    ssh=True,\n    ssh_host=\"gateway.server\",\n    database=\"mydb\"\n)\n\n# LDAP authentication\ndb = Mongo(\n    host=\"mongodb.server\",\n    authentication=\"LDAP\"\n)\n</code></pre>"},{"location":"#authentication-methods","title":"Authentication Methods","text":""},{"location":"#direct-connection","title":"Direct Connection","text":"<p>Basic MongoDB connection without authentication: <pre><code>db = Mongo(host=\"localhost\")\n</code></pre></p>"},{"location":"#ssh-tunnel","title":"SSH Tunnel","text":"<p>Connect through an SSH tunnel: <pre><code>db = Mongo(\n    host=\"internal.server\",\n    ssh=True,\n    ssh_host=\"gateway.server\",\n    ssh_username=\"user\",\n    database=\"mydb\"\n)\n</code></pre></p>"},{"location":"#ldap-authentication","title":"LDAP Authentication","text":"<p>Connect using LDAP credentials: <pre><code>db = Mongo(\n    host=\"mongodb.server\",\n    authentication=\"LDAP\",\n    username=\"ldap_user\"\n)\n</code></pre></p>"},{"location":"#api-reference","title":"API Reference","text":""},{"location":"#mongo-class","title":"Mongo Class","text":""},{"location":"#constructor-parameters","title":"Constructor Parameters","text":"<ul> <li><code>host</code> (str): MongoDB server hostname</li> <li><code>port</code> (int, optional): MongoDB port number. Default: 27017</li> <li><code>authentication</code> (str, optional): Authentication type ('LDAP'). Default: None</li> <li><code>username</code> (str, optional): Username for authentication</li> <li><code>password</code> (str, optional): Password for authentication</li> <li><code>ssh</code> (bool, optional): Use SSH tunnel. Default: False</li> <li><code>ssh_host</code> (str, optional): SSH gateway server</li> <li><code>database</code> (str, optional): Database name</li> <li><code>ssh_username</code> (str, optional): SSH username</li> <li><code>ssh_password</code> (str, optional): SSH password</li> <li><code>timeout</code> (int, optional): Connection timeout in ms. Default: 5000</li> </ul>"},{"location":"#methods","title":"Methods","text":""},{"location":"#database-operations","title":"Database Operations","text":"<ul> <li> <p><code>getDBs() -&gt; List[str]</code>   Returns list of available databases</p> </li> <li> <p><code>setDB(db_name: str)</code>   Connect to specific database</p> </li> </ul>"},{"location":"#record-operations","title":"Record Operations","text":"<ul> <li> <p><code>getRecord(collection: str, field: Union[str, ObjectId, Dict])</code>   Retrieve single record from collection</p> </li> <li> <p><code>getRecords(collection: str) -&gt; List</code>   Retrieve all records from collection</p> </li> <li> <p><code>newRecord(collection: str, **kwargs) -&gt; ObjectId</code>   Create new record in collection</p> </li> <li> <p><code>updateRecord(collection: str, field: Union[str, ObjectId, Dict], updateVals: Dict, updateType: str)</code>   Update existing record</p> </li> <li> <p><code>deleteRecords(collection: str)</code>   Delete all records in collection</p> </li> <li> <p><code>dropCollection(collection: str)</code>   Delete entire collection</p> </li> </ul>"},{"location":"#file-operations","title":"File Operations","text":"<ul> <li> <p><code>putFile(filepath: str, **kwargs) -&gt; ObjectId</code>   Store file in GridFS</p> </li> <li> <p><code>getFile(fileID: Union[str, ObjectId]) -&gt; bytes</code>   Retrieve file from GridFS</p> </li> <li> <p><code>deleteFile(fileID: Union[str, ObjectId])</code>   Delete file from GridFS</p> </li> </ul>"},{"location":"#error-handling","title":"Error Handling","text":"<p>The package raises standard MongoDB exceptions plus:</p> <ul> <li><code>ValueError</code>: Invalid database or collection names</li> <li><code>TypeError</code>: Invalid field types</li> <li><code>Exception</code>: Connection timeouts</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create feature branch</li> <li>Commit changes</li> <li>Push to branch</li> <li>Create Pull Request</li> </ol>"},{"location":"#license","title":"License","text":"<p>see LICENSE</p>"},{"location":"LICENSE/","title":"LICENSE","text":"<p>PSF LICENSE AGREEMENT FOR PYTHON 3.9.5 1. This LICENSE AGREEMENT is between the Python Software Foundation (\"PSF\"), and the Individual or Organization (\"Licensee\") accessing and otherwise using Python 3.9.5 software in source or binary form and its associated documentation.</p> <ol> <li> <p>Subject to the terms and conditions of this License Agreement, PSF hereby    grants Licensee a nonexclusive, royalty-free, world-wide license to reproduce, analyze, test, perform and/or display publicly, prepare derivative works, distribute, and otherwise use Python 3.9.5 alone or in any derivative version, provided, however, that PSF's License Agreement and PSF's notice of copyright, i.e., \"Copyright \u00a9 2001-2021 Python Software Foundation; All Rights Reserved\" are retained in Python 3.9.5 alone or in any derivative version prepared by Licensee.</p> </li> <li> <p>In the event Licensee prepares a derivative work that is based on or   incorporates Python 3.9.5 or any part thereof, and wants to make the    derivative work available to others as provided herein, then Licensee hereby agrees to include in any such work a brief summary of the changes made to Python 3.9.5.</p> </li> <li> <p>PSF is making Python 3.9.5 available to Licensee on an \"AS IS\" basis.    PSF MAKES NO REPRESENTATIONS OR WARRANTIES, EXPRESS OR IMPLIED.  BY WAY OF    EXAMPLE, BUT NOT LIMITATION, PSF MAKES NO AND DISCLAIMS ANY REPRESENTATION OR WARRANTY OF MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE OR THAT THE USE OF PYTHON 3.9.5 WILL NOT INFRINGE ANY THIRD PARTY RIGHTS.</p> </li> <li> <p>PSF SHALL NOT BE LIABLE TO LICENSEE OR ANY OTHER USERS OF PYTHON 3.9.5    FOR ANY INCIDENTAL, SPECIAL, OR CONSEQUENTIAL DAMAGES OR LOSS AS A RESULT OF MODIFYING, DISTRIBUTING, OR OTHERWISE USING PYTHON 3.9.5, OR ANY DERIVATIVE THEREOF, EVEN IF ADVISED OF THE POSSIBILITY THEREOF.</p> </li> <li> <p>This License Agreement will automatically terminate upon a material breach of its terms and conditions.</p> </li> <li> <p>Nothing in this License Agreement shall be deemed to create any relationship of agency, partnership, or joint venture between PSF and Licensee.  This License Agreement does not grant permission to use PSF trademarks or trade name in a trademark sense to endorse or promote products or services of Licensee, or any third party.</p> </li> <li> <p>By copying, installing or otherwise using Python 3.9.5, Licensee agrees    to be bound by the terms and conditions of this License Agreement.</p> </li> </ol>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#mongo-class","title":"Mongo Class","text":"<p>Provides an interface to MongoDB with support for SSH tunneling and LDAP authentication.</p>"},{"location":"api/#class-attributes","title":"Class Attributes","text":"<ul> <li><code>timeout</code> (int): Connection timeout in milliseconds</li> <li><code>server</code> (SSHTunnelForwarder): SSH tunnel connection if active</li> <li><code>username</code> (str): Current username for authentication</li> <li><code>dbClient</code> (MongoClient): MongoDB client connection</li> <li><code>db</code> (Database): Current active database</li> <li><code>fs</code> (GridFS): GridFS instance for file operations</li> <li><code>dbList</code> (List[str]): List of available databases</li> <li><code>collList</code> (List[str]): List of collections in current database</li> </ul>"},{"location":"api/#constructor","title":"Constructor","text":"<pre><code>def __init__(\n    self,\n    host: str,\n    port: int = 27017,\n    authentication: Optional[str] = None,\n    username: Optional[str] = None,\n    password: Optional[str] = None,\n    ssh: bool = False,\n    ssh_host: Optional[str] = None,\n    database: Optional[str] = None,\n    ssh_username: Optional[str] = None,\n    ssh_password: Optional[str] = None,\n    timeout: int = 5000,\n):\n</code></pre> <p>Establishes connection to a MongoDB server based on provided parameters.</p>"},{"location":"api/#connection-methods","title":"Connection Methods","text":""},{"location":"api/#_connect_directly","title":"_connect_directly","text":"<p><pre><code>def _connect_directly(self, uri: str) -&gt; None:\n</code></pre> Internal method to establish direct MongoDB connection.</p>"},{"location":"api/#_connect_via_ssh","title":"_connect_via_ssh","text":"<p><pre><code>def _connect_via_ssh(\n    self,\n    host: str,\n    port: int,\n    ssh_host: str,\n    ssh_username: Optional[str],\n    ssh_password: Optional[str],\n    database: Optional[str],\n    username: str,\n    password: str,\n) -&gt; None:\n</code></pre> Internal method to establish MongoDB connection through SSH tunnel.</p>"},{"location":"api/#_connect_with_ldap","title":"_connect_with_ldap","text":"<p><pre><code>def _connect_with_ldap(\n    self,\n    host: Union[str, List[str]],\n    port: int,\n    password: Optional[str]\n) -&gt; None:\n</code></pre> Internal method to establish MongoDB connection using LDAP authentication.</p>"},{"location":"api/#database-operations","title":"Database Operations","text":""},{"location":"api/#getdbs","title":"getDBs","text":"<p><pre><code>def getDBs(self) -&gt; List[str]:\n</code></pre> Returns list of available databases on the server.</p>"},{"location":"api/#setdb","title":"setDB","text":"<p><pre><code>def setDB(self, db_name: str) -&gt; None:\n</code></pre> Connects to a specific database and initializes GridFS.</p>"},{"location":"api/#record-operations","title":"Record Operations","text":""},{"location":"api/#getrecord","title":"getRecord","text":"<p><pre><code>def getRecord(\n    self,\n    collection: str,\n    field: Union[str, ObjectId, Dict]\n) -&gt; Dict:\n</code></pre> Retrieves a single record from the specified collection.</p>"},{"location":"api/#getrecords","title":"getRecords","text":"<p><pre><code>def getRecords(self, collection: str) -&gt; List[Dict]:\n</code></pre> Retrieves all records from the specified collection.</p>"},{"location":"api/#newrecord","title":"newRecord","text":"<p><pre><code>def newRecord(self, collection: str, **kwargs) -&gt; ObjectId:\n</code></pre> Creates a new record in the specified collection with optional fields.</p>"},{"location":"api/#updaterecord","title":"updateRecord","text":"<p><pre><code>def updateRecord(\n    self,\n    collection: str,\n    field: Union[str, ObjectId, Dict],\n    updateVals: Dict,\n    updateType: str\n) -&gt; None:\n</code></pre> Updates an existing record. UpdateType must be 'set' or 'push'.</p>"},{"location":"api/#deleterecords","title":"deleteRecords","text":"<p><pre><code>def deleteRecords(self, collection: str) -&gt; None:\n</code></pre> Deletes all records in the specified collection.</p>"},{"location":"api/#dropcollection","title":"dropCollection","text":"<p><pre><code>def dropCollection(self, collection: str) -&gt; None:\n</code></pre> Deletes the specified collection entirely.</p>"},{"location":"api/#file-operations-gridfs","title":"File Operations (GridFS)","text":""},{"location":"api/#putfile","title":"putFile","text":"<p><pre><code>def putFile(self, filepath: str, **kwargs) -&gt; ObjectId:\n</code></pre> Stores a file in GridFS with optional metadata.</p>"},{"location":"api/#getfile","title":"getFile","text":"<p><pre><code>def getFile(self, fileID: Union[str, ObjectId]) -&gt; bytes:\n</code></pre> Retrieves a file from GridFS by its ID.</p>"},{"location":"api/#deletefile","title":"deleteFile","text":"<p><pre><code>def deleteFile(self, fileID: Union[str, ObjectId]) -&gt; None:\n</code></pre> Deletes a file from GridFS by its ID.</p>"},{"location":"api/#helper-methods","title":"Helper Methods","text":""},{"location":"api/#_validate_field","title":"_validate_field","text":"<p><pre><code>def _validate_field(\n    self,\n    field: Union[str, ObjectId, Dict]\n) -&gt; Dict:\n</code></pre> Internal method to validate and normalize field parameters.</p>"},{"location":"api/#exceptions","title":"Exceptions","text":"<ul> <li><code>ValueError</code>: Raised for invalid database names, collection names, or update types</li> <li><code>TypeError</code>: Raised for invalid field types or parameters</li> <li><code>pymongo.errors.ServerSelectionTimeoutError</code>: Raised for connection timeouts</li> <li><code>Exception</code>: Generic exceptions with descriptive messages</li> </ul>"},{"location":"api/#type-hints","title":"Type Hints","text":"<p>The package uses the following type hints: <pre><code>from typing import Dict, List, Optional, Union\nfrom bson.objectid import ObjectId\nfrom sshtunnel import SSHTunnelForwarder\nfrom pymongo.database import Database\nfrom gridfs import GridFS\n</code></pre></p>"}]}